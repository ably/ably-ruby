# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  config.mock_with :rspec do |mocks|
    # This option should be set when all dependencies are being loaded
    # before a spec run, as is the case in a typical spec helper. It will
    # cause any verifying double instantiation for a class that does not
    # exist to raise, protecting against incorrectly spelt names.
    mocks.verify_doubled_constant_names = true
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.before(:example) do
    WebMock.disable!
  end

  config.before(:example, :webmock) do
    allow(TestApp).to receive(:instance).and_return(instance_double('TestApp',
      app_id: 'app_id',
      key_id: 'app_id.key_id',
      api_key: 'app_id.key_id:secret',
      environment: 'sandbox'
    ))
    WebMock.enable!
  end

  # PrivateApiFormatter is an RSpec Formatter that prefixes all tests that are part of a Private API with '(private)'
  #
  # Private API methods are tested for this library, but every implementation of the Ably client library
  # will likely be different and thus the private API method tests are not shared.
  #
  # Filter private API tests with `rspec --tag ~api_private`
  #
  class PrivateApiFormatter
    RSpec::Core::Formatters.register self, :example_started

    def initialize(output)
      @output = output
    end

    def example_started(notification)
      if notification.example.metadata[:api_private]
        notification.example.metadata[:description] = "#{yellow('(private)')} #{green(notification.example.metadata[:description])}"
      end
    end

    private
    def colorize(color_code, string)
      "\e[#{color_code}m#{string}\e[0m"
    end

    def yellow(string)
      colorize(33, string)
    end


    def green(string)
      colorize(32, string)
    end
  end

  config.add_formatter PrivateApiFormatter
end
